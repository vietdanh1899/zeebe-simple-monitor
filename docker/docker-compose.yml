version: "3"

networks:
  zeebe_network:
    driver: bridge

services:
  graphql-engine:
    image: hasura/graphql-engine:v2.38.0-ce
    ports:
      - "8080:8080"
    restart: always
    networks:
      - zeebe_network
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:zeebe@postgres-zeebe-simple-monitor:5432/zeeqs
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:zeebe@postgres-zeebe-simple-monitor:5432/zeeqs
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
  
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.38.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  zeebe:
    container_name: zeebe-broker-hazelcast
    image: ghcr.io/camunda-community-hub/zeebe-with-hazelcast-exporter:8.2.0
    environment:
      - ZEEBE_LOG_LEVEL=debug
      - ZEEBE_HAZELCAST_CLUSTER_NAME=dev
    ports:
      - "26500:26500"
      - "9600:9600"
      - "5701:5701"
    networks:
      - zeebe_network
    volumes:
      - ./hazelcast/application.yaml:/usr/local/zeebe/config/application.yaml
    profiles:
      - hazelcast

  zeebe-kafka:
    container_name: zeebe-broker-kafka
    image: camunda/zeebe:8.3.4
    hostname: zeebe
    environment:
      ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT: 5
      SPRING_CONFIG_ADDITIONAL_LOCATION: /usr/local/zeebe/config/exporter.yml
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TOPIC: zeebe
    depends_on:
      - kafka
    ports:
      - "26500:26500"
    networks:
      - zeebe_network
    volumes:
      - ./kafka/exporter.yml:/usr/local/zeebe/config/exporter.yml
      - ./kafka/exporter/zeebe-kafka-exporter-3.1.1-jar-with-dependencies.jar:/usr/local/zeebe/lib/zeebe-kafka-exporter.jar
    profiles:
      - kafka

  zeebe-redis:
    container_name: zeebe-broker-redis
    image: ghcr.io/camunda-community-hub/zeebe-with-redis-exporter:8.5.0
    hostname: zeebe
    environment:
      - ZEEBE_REDIS_REMOTE_ADDRESS=redis://redis:6379
      - ZEEBE_REDIS_MAX_TIME_TO_LIVE_IN_SECONDS=900
      - ZEEBE_REDIS_DELETE_AFTER_ACKNOWLEDGE=true
    ports:
      - "26500:26500"
      - "9600:9600"
    networks:
      - zeebe_network
    volumes:
      - ./redis/application.yaml:/usr/local/zeebe/config/application.yaml
    profiles:
      - redis

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - zeebe_network
    profiles:
      - kafka

  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9093:9093"
    environment:
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - zeebe_network
    profiles:
      - kafka

  redis:
    container_name: redis_cache
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - zeebe_network
    profiles:
      - redis

  # simple-monitor-in-memory:
  #   container_name: zeebe-simple-monitor-in-memory
  #   image: ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.5.2
  #   environment:
  #     - zeebe.client.broker.gateway-address=zeebe:26500
  #     - zeebe.client.worker.hazelcast.connection=zeebe:5701
  #     - zeebe.client.worker.hazelcast.clusterName=dev
  #   ports:
  #     - "8082:8082"
  #   depends_on:
  #     - zeebe
  #   networks:
  #     - zeebe_network
  #   profiles:
  #     - hazelcast_in_memory

  simple-monitor-in-memory-kafka:
    container_name: zeebe-simple-monitor-in-memory-kafka
    image: ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.5.2
    environment:
      - zeebe.client.broker.gateway-address=zeebe:26500
      - zeebe-importer=kafka
      - spring.kafka.bootstrap-servers=kafka:9092
      - spring.kafka.template.default-topic=zeebe
    ports:
      - "8082:8082"
    depends_on:
      - zeebe-kafka
    networks:
      - zeebe_network
    profiles:
      - kafka_in_memory

  simple-monitor-in-memory-redis:
    container_name: zeebe-simple-monitor-in-memory-redis
    image: ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.7.1
    environment:
      - zeebe.client.broker.gateway-address=zeebe:26500
      - zeebe-importer=redis
      - zeebe.client.worker.redis.connection=redis://redis:6379
    ports:
      - "8082:8082"
    depends_on:
      - zeebe-redis
    networks:
      - zeebe_network
    profiles:
      - redis_in_memory

  simple-monitor-postgres-redis:
    container_name: simple-monitor-postgres-redis
    image: ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.7.2
    environment:
      - zeebe.client.broker.gateway-address=zeebe:26500
      - zeebe-importer=redis
      - zeebe.client.worker.redis.connection=redis://redis:6379
      - spring.datasource.url=jdbc:postgresql://postgres-zeebe-simple-monitor:5432/postgres
      - spring.datasource.username=postgres
      - spring.datasource.password=zeebe
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
      - spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
    ports:
      - "8082:8082"
    depends_on:
      - zeebe-redis
    networks:
      - zeebe_network
    profiles:
      - redis

  simple-monitor-postgres:
    container_name: zeebe-simple-monitor-postgres
    image: ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.5.2
    environment:
      - zeebe.client.broker.gateway-address=zeebe:26500
      - zeebe.client.worker.hazelcast.connection=zeebe:5701
      - zeebe.client.worker.hazelcast.clusterName=dev
      - spring.datasource.url=jdbc:postgresql://postgres-zeebe-simple-monitor:5432/postgres
      - spring.datasource.username=postgres
      - spring.datasource.password=zeebe
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
    ports:
      - "8082:8082"
    depends_on:
      - zeebe
      - postgres-zeebe-simple-monitor
    networks:
      - zeebe_network
    profiles:
      - hazelcast_postgres

#  zeebe-simple-tasklist-postgres:
#    container_name: zeebe-simple-tasklist-postgres
#    image: ghcr.io/camunda-community-hub/zeebe-simple-tasklist:latest
#    environment:
#      - zeebe.client.broker.gateway-address=zeebe:26500
#      - zeebe.client.worker.hazelcast.connection=zeebe:5701
#      - spring.datasource.url=jdbc:postgresql://postgres-zeebe-simple-monitor:5432/postgres
#      - spring.datasource.username=postgres
#      - spring.datasource.password=zeebe
#      - spring.datasource.driverClassName=org.postgresql.Driver
#      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#    ports:
#      - "8081:8081"
#    depends_on:
#      - zeebe
#      - postgres-zeebe-simple-monitor
#    networks:
#      - zeebe_network
#    profiles:
#      - postgres

  postgres-zeebe-simple-monitor:
    image: postgres:16.1
    restart: always
    environment:
      POSTGRES_PASSWORD: zeebe
    volumes:
      - postgres-zeebe-simple-monitor-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - zeebe_network
    profiles:
      - postgres

  simple-monitor-mysql:
    container_name: zeebe-simple-monitor-mysql
    image: ghcr.io/camunda-community-hub/zeebe-simple-monitor:2.5.2
    environment:
      - zeebe.client.broker.gateway-address=zeebe:26500
      - zeebe.client.worker.hazelcast.connection=zeebe:5701
      - zeebe.client.worker.hazelcast.clusterName=dev
      - spring.datasource.url=jdbc:mysql://mysql-zeebe-simple-monitor:3306/simple_monitor?createDatabaseIfNotExist=true
      - spring.datasource.username=root
      - spring.datasource.password=zeebe
      - spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
      - spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    ports:
      - "8082:8082"
    depends_on:
      - zeebe
      - mysql-zeebe-simple-monitor
    networks:
      - zeebe_network
    profiles:
      - hazelcast_mysql

  mysql-zeebe-simple-monitor:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: zeebe
    volumes:
      - mysql-zeebe-simple-monitor-data:/var/lib/mysql
    networks:
      - zeebe_network
    profiles:
      - mysql

volumes:
  postgres-zeebe-simple-monitor-data:
    driver: local
  mysql-zeebe-simple-monitor-data:
    driver: local
